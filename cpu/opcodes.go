package cpu

func init() {
	ld(sp.Write(), paramW())
}

func createOpCodeTable() opCodeTable {
	extTbl := createExtendedOpCodeTable()

	return opCodeTable{
		/* 0x00: NOP         */ nop(),
		/* 0x01: LD BC, nn   */ ld(bc.Write(), paramW()),
		/* 0x02: LD (BC), A  */ ld(bc.Deref().Write(), a.Read()),
		/* 0x03: INC BC      */ incR16(bc),
		/* 0x04: INC B       */ incR8(b),
		/* 0x05: DEC B       */ decR8(b),
		/* 0x06: LD B, n     */ ld(b.Write(), paramB()),
		/* 0x07: RLCA        */ rlca(),
		/* 0x08: LD (nn), SP */ pipe(sp.Read(), paramW(), writeWord()),
		/* 0x09: ADD HL, BC  */ addR16(hl, bc),
		/* 0x0A: LD A, (BC)  */ ld(a.Write(), bc.Deref().Read()),
		/* 0x0B: DEC BC      */ decR16(bc),
		/* 0x0C: INC C       */ incR8(c),
		/* 0x0D: DEC C       */ decR8(c),
		/* 0x0E: LD C,n      */ ld(c.Write(), paramB()),
		/* 0x0F: RRC A       */ rrca(),
		/* 0x10: STOP        */ stop(),
		/* 0x11: LD DE,nn    */ ld(de.Write(), paramW()),
		/* 0x12: LD (DE),A   */ ld(de.Deref().Write(), a.Read()),
		/* 0x13: INC DE      */ incR16(de),
		/* 0x14: INC D       */ incR8(d),
		/* 0x15: DEC D       */ decR8(d),
		/* 0x16: LD D,n      */ ld(d.Write(), paramB()),
		/* 0x17: RLA         */ rla(),
		/* 0x18: JR n        */ jr(flag(0), false),
		/* 0x19: ADD HL,DE   */ addR16(hl, de),
		/* 0x1A: LD A,(DE)   */ ld(a.Write(), de.Deref().Read()),
		/* 0x1B: DEC DE      */ decR16(de),
		/* 0x1C: INC E       */ incR8(e),
		/* 0x1D: DEC E       */ decR8(e),
		/* 0x1E: LD E,n      */ ld(e.Write(), paramB()),
		/* 0x1F: RRA         */ rra(),
		/* 0x20: JR NZ,n     */ jr(zero, true),
		/* 0x21: LD HL,nn    */ ld(hl.Write(), paramW()),
		/* 0x22: LDI (HL), A */ pipe(a.Read(), hl.Deref().Write(), incHLFast()),
		/* 0x23: INC HL      */ incR16(hl),
		/* 0x24: INC H       */ incR8(h),
		/* 0x25: DEC H       */ decR8(h),
		/* 0x26: LD H,n      */ ld(h.Write(), paramB()),
		/* 0x27: DAA         */ daa(),
		/* 0x28: JR Z,n      */ jr(zero, false),
		/* 0x29: ADD HL,HL   */ addR16(hl, hl),
		/* 0x2A: LDI A, (HL) */ pipe(hl.Deref().Read(), a.Write(), incHLFast()),
		/* 0x2B: DEC HL      */ decR16(hl),
		/* 0x2C: INC L       */ incR8(l),
		/* 0x2D: DEC L       */ decR8(l),
		/* 0x2E: LD L, n     */ ld(l.Write(), paramB()),
		/* 0x2F: CPL         */ cpl(),
		/* 0x30: JR NC,n     */ jr(carry, true),
		/* 0x31: LD SP,nn    */ ld(sp.Write(), paramW()),
		/* 0x32: LDD (HL),A  */ pipe(a.Read(), hl.Deref().Write(), decHLFast()),
		/* 0x33: INC SP      */ incR16(sp),
		/* 0x34: INC (HL)    */ incR8(hl.Deref()),
		/* 0x35: DEC (HL)    */ decR8(hl.Deref()),
		/* 0x36: LD (HL),n   */ ld(hl.Deref().Write(), paramB()),
		/* 0x37: SCF         */ scf(),
		/* 0x38: JR C,n      */ jr(carry, false),
		/* 0x39: ADD HL,SP   */ addR16(hl, sp),
		/* 0x3A: LDD A,(HL)  */ pipe(hl.Deref().Read(), a.Write(), decHLFast()),
		/* 0x3B: DEC SP      */ decR16(sp),
		/* 0x3C: INC A       */ incR8(a),
		/* 0x3D: DEC A       */ decR8(a),
		/* 0x3E: LD A,n      */ ld(a.Write(), paramB()),
		/* 0x3F: CCF         */ ccf(),
		/* 0x40: LD B, B     */ ld(b.Write(), b.Read()),
		/* 0x41: LD B, C     */ ld(b.Write(), c.Read()),
		/* 0x42: LD B, D     */ ld(b.Write(), d.Read()),
		/* 0x43: LD B, E     */ ld(b.Write(), e.Read()),
		/* 0x44: LD B, H     */ ld(b.Write(), h.Read()),
		/* 0x45: LD B, L     */ ld(b.Write(), l.Read()),
		/* 0x46: LD B, (HL)  */ ld(b.Write(), hl.Deref().Read()),
		/* 0x47: LD B, A     */ ld(b.Write(), a.Read()),
		/* 0x48: LD C, B     */ ld(c.Write(), b.Read()),
		/* 0x49: LD C, C     */ ld(c.Write(), c.Read()),
		/* 0x4A: LD C, D     */ ld(c.Write(), d.Read()),
		/* 0x4B: LD C, E     */ ld(c.Write(), e.Read()),
		/* 0x4C: LD C, H     */ ld(c.Write(), h.Read()),
		/* 0x4D: LD C, L     */ ld(c.Write(), l.Read()),
		/* 0x4E: LD C, (HL)  */ ld(c.Write(), hl.Deref().Read()),
		/* 0x4F: LD C, A     */ ld(c.Write(), a.Read()),
		/* 0x50: LD D, B     */ ld(d.Write(), b.Read()),
		/* 0x51: LD D, C     */ ld(d.Write(), c.Read()),
		/* 0x52: LD D, D     */ ld(d.Write(), d.Read()),
		/* 0x53: LD D, E     */ ld(d.Write(), e.Read()),
		/* 0x54: LD D, H     */ ld(d.Write(), h.Read()),
		/* 0x55: LD D, L     */ ld(d.Write(), l.Read()),
		/* 0x56: LD D, (HL)  */ ld(d.Write(), hl.Deref().Read()),
		/* 0x57: LD D, A     */ ld(d.Write(), a.Read()),
		/* 0x58: LD E, B     */ ld(e.Write(), b.Read()),
		/* 0x59: LD E, C     */ ld(e.Write(), c.Read()),
		/* 0x5A: LD E, D     */ ld(e.Write(), d.Read()),
		/* 0x5B: LD E, E     */ ld(e.Write(), e.Read()),
		/* 0x5C: LD E, H     */ ld(e.Write(), h.Read()),
		/* 0x5D: LD E, L     */ ld(e.Write(), l.Read()),
		/* 0x5E: LD E, (HL)  */ ld(e.Write(), hl.Deref().Read()),
		/* 0x5F: LD E, A     */ ld(e.Write(), a.Read()),
		/* 0x60: LD H, B     */ ld(h.Write(), b.Read()),
		/* 0x61: LD H, C     */ ld(h.Write(), c.Read()),
		/* 0x62: LD H, D     */ ld(h.Write(), d.Read()),
		/* 0x63: LD H, E     */ ld(h.Write(), e.Read()),
		/* 0x64: LD H, H     */ ld(h.Write(), h.Read()),
		/* 0x65: LD H, L     */ ld(h.Write(), l.Read()),
		/* 0x66: LD H, (HL)  */ ld(h.Write(), hl.Deref().Read()),
		/* 0x67: LD H, A     */ ld(h.Write(), a.Read()),
		/* 0x68: LD L, B     */ ld(l.Write(), b.Read()),
		/* 0x69: LD L, C     */ ld(l.Write(), c.Read()),
		/* 0x6A: LD L, D     */ ld(l.Write(), d.Read()),
		/* 0x6B: LD L, E     */ ld(l.Write(), e.Read()),
		/* 0x6C: LD L, H     */ ld(l.Write(), h.Read()),
		/* 0x6D: LD L, L     */ ld(l.Write(), l.Read()),
		/* 0x6E: LD L, (HL)  */ ld(l.Write(), hl.Deref().Read()),
		/* 0x6F: LD L, A     */ ld(l.Write(), a.Read()),
		/* 0x70: LD (HL), B  */ ld(hl.Deref().Write(), b.Read()),
		/* 0x71: LD (HL), C  */ ld(hl.Deref().Write(), c.Read()),
		/* 0x72: LD (HL), D  */ ld(hl.Deref().Write(), d.Read()),
		/* 0x73: LD (HL), E  */ ld(hl.Deref().Write(), e.Read()),
		/* 0x74: LD (HL), H  */ ld(hl.Deref().Write(), h.Read()),
		/* 0x75: LD (HL), L  */ ld(hl.Deref().Write(), l.Read()),
		/* 0x76: HALT        */ halt(),
		/* 0x77: LD (HL), A  */ ld(hl.Deref().Write(), a.Read()),
		/* 0x78: LD A, B     */ ld(a.Write(), b.Read()),
		/* 0x79: LD A, C     */ ld(a.Write(), c.Read()),
		/* 0x7A: LD A, D     */ ld(a.Write(), d.Read()),
		/* 0x7B: LD A, E     */ ld(a.Write(), e.Read()),
		/* 0x7C: LD A, H     */ ld(a.Write(), h.Read()),
		/* 0x7D: LD A, L     */ ld(a.Write(), l.Read()),
		/* 0x7E: LD A, (HL)  */ ld(a.Write(), hl.Deref().Read()),
		/* 0x7F: LD A, A     */ ld(a.Write(), a.Read()),
		/* 0x80: ADD A, B    */ addR8(a, b.Read()),
		/* 0x81: ADD A, C    */ addR8(a, c.Read()),
		/* 0x82: ADD A, D    */ addR8(a, d.Read()),
		/* 0x83: ADD A, E    */ addR8(a, e.Read()),
		/* 0x84: ADD A, H    */ addR8(a, h.Read()),
		/* 0x85: ADD A, L    */ addR8(a, l.Read()),
		/* 0x86: ADD A, (HL) */ addR8(a, hl.Deref().Read()),
		/* 0x87: ADD A, A    */ addR8(a, a.Read()),
		/* 0x88: ADC A, B    */ adcR8(a, b.Read()),
		/* 0x89: ADC A, C    */ adcR8(a, c.Read()),
		/* 0x8A: ADC A, D    */ adcR8(a, d.Read()),
		/* 0x8B: ADC A, E    */ adcR8(a, e.Read()),
		/* 0x8C: ADC A, H    */ adcR8(a, h.Read()),
		/* 0x8D: ADC A, L    */ adcR8(a, l.Read()),
		/* 0x8E: ADC A, (HL) */ adcR8(a, hl.Deref().Read()),
		/* 0x8F: ADC A, A    */ adcR8(a, a.Read()),
		/* 0x90: SUB A, B    */ subR8(a, b.Read()),
		/* 0x91: SUB A, C    */ subR8(a, c.Read()),
		/* 0x92: SUB A, D    */ subR8(a, d.Read()),
		/* 0x93: SUB A, E    */ subR8(a, e.Read()),
		/* 0x94: SUB A, H    */ subR8(a, h.Read()),
		/* 0x95: SUB A, L    */ subR8(a, l.Read()),
		/* 0x96: SUB A, (HL) */ subR8(a, hl.Deref().Read()),
		/* 0x97: SUB A, A    */ subR8(a, a.Read()),
		/* 0x98: SBC A, B    */ sbcR8(a, b.Read()),
		/* 0x99: SBC A, C    */ sbcR8(a, c.Read()),
		/* 0x9A: SBC A, D    */ sbcR8(a, d.Read()),
		/* 0x9B: SBC A, E    */ sbcR8(a, e.Read()),
		/* 0x9C: SBC A, H    */ sbcR8(a, h.Read()),
		/* 0x9D: SBC A, L    */ sbcR8(a, l.Read()),
		/* 0x9E: SBC A, (HL) */ sbcR8(a, hl.Deref().Read()),
		/* 0x9F: SBC A, A    */ sbcR8(a, a.Read()),
		/* 0xA0: AND B       */ andR8(a, b.Read()),
		/* 0xA1: AND C       */ andR8(a, c.Read()),
		/* 0xA2: AND D       */ andR8(a, d.Read()),
		/* 0xA3: AND E       */ andR8(a, e.Read()),
		/* 0xA4: AND H       */ andR8(a, h.Read()),
		/* 0xA5: AND L       */ andR8(a, l.Read()),
		/* 0xA6: AND (HL)    */ andR8(a, hl.Deref().Read()),
		/* 0xA7: AND A       */ andR8(a, a.Read()),
		/* 0xA8: XOR B       */ xorR8(a, b.Read()),
		/* 0xA9: XOR C       */ xorR8(a, c.Read()),
		/* 0xAA: XOR D       */ xorR8(a, d.Read()),
		/* 0xAB: XOR E       */ xorR8(a, e.Read()),
		/* 0xAC: XOR H       */ xorR8(a, h.Read()),
		/* 0xAD: XOR L       */ xorR8(a, l.Read()),
		/* 0xAE: XOR (HL)    */ xorR8(a, hl.Deref().Read()),
		/* 0xAF: XOR A       */ xorR8(a, a.Read()),
		/* 0xB0: OR B        */ orR8(a, b.Read()),
		/* 0xB1: OR C        */ orR8(a, c.Read()),
		/* 0xB2: OR D        */ orR8(a, d.Read()),
		/* 0xB3: OR E        */ orR8(a, e.Read()),
		/* 0xB4: OR H        */ orR8(a, h.Read()),
		/* 0xB5: OR L        */ orR8(a, l.Read()),
		/* 0xB6: OR (HL)     */ orR8(a, hl.Deref().Read()),
		/* 0xB7: OR A        */ orR8(a, a.Read()),
		/* 0xB8: CP B        */ cpR8(a, b.Read()),
		/* 0xB9: CP C        */ cpR8(a, c.Read()),
		/* 0xBA: CP D        */ cpR8(a, d.Read()),
		/* 0xBB: CP E        */ cpR8(a, e.Read()),
		/* 0xBC: CP H        */ cpR8(a, h.Read()),
		/* 0xBD: CP L        */ cpR8(a, l.Read()),
		/* 0xBE: CP (HL)     */ cpR8(a, hl.Deref().Read()),
		/* 0xBF: CP A        */ cpR8(a, a.Read()),
		/* 0xC0: RET NZ      */ ret(zero, true),
		/* 0xC1: POP BC      */ pop(bc),
		/* 0xC2: JP NZ, nn   */ jp(zero, true),
		/* 0xC3: JP nn       */ jp(flag(0), false),
		/* 0xC4: CALL NZ, nn */ call(zero, true),
		/* 0xC5: PUSH BC     */ push(bc),
		/* 0xC6: ADD A, n    */ addR8(a, paramB()),
		/* 0xC7: RST 0       */ rst(0x00),
		/* 0xC8: RET Z       */ ret(zero, false),
		/* 0xC9: RET         */ pipe(pop(pc), delay{}),
		/* 0xCA: JP Z,nn     */ jp(zero, false),
		/* 0xCB: Ext ops     */ pipe(paramB(), extTbl),
		/* 0xCC: CALL Z, nn  */ call(zero, false),
		/* 0xCD: CALL nn     */ call(flag(0), false),
		/* 0xCE: ADC A, n    */ adcR8(a, paramB()),
		/* 0xCF: RST 8       */ rst(0x08),
		/* 0xD0: RET NC      */ ret(carry, true),
		/* 0xD1: POP DE      */ pop(de),
		/* 0xD2: JP NC, nn   */ jp(carry, true),
		/* 0xD3: XX          */ invalid(),
		/* 0xD4: CALL NC, nn */ call(carry, true),
		/* 0xD5: PUSH DE     */ push(de),
		/* 0xD6: SUB A, n    */ subR8(a, paramB()),
		/* 0xD7: RST 10      */ rst(0x10),
		/* 0xD8: RET C       */ ret(carry, false),
		/* 0xD9: RETI        */ reti(),
		/* 0xDA: JP C, nn    */ jp(carry, false),
		/* 0xDB: XX          */ invalid(),
		/* 0xDC: CALL C, nn  */ call(carry, false),
		/* 0xDD: XX          */ invalid(),
		/* 0xDE: SBC A, n    */ sbcR8(a, paramB()),
		/* 0xDF: RST 18      */ rst(0x18),
		/* 0xE0: LDH (n), A  */ pipe(a.Read(), paramB(), val(0xFF), writeByte{}),
		/* 0xE1: POP HL      */ pop(hl),
		/* 0xE2: LDH (C), A  */ pipe(a.Read(), c.Read(), val(0xFF), writeByte{}),
		/* 0xE3: XX          */ invalid(),
		/* 0xE4: XX          */ invalid(),
		/* 0xE5: PUSH HL     */ push(hl),
		/* 0xE6: AND n       */ andR8(a, paramB()),
		/* 0xE7: RST 20      */ rst(0x20),
		/* 0xE8: ADD SP,d    */ addSP(),
		/* 0xE9: JP (HL)     */ ld(pc.Write(), hl.Read()),
		/* 0xEA: LD (nn),A   */ pipe(a.Read(), paramW(), writeByte{}),
		/* 0xEB: XX          */ invalid(),
		/* 0xEC: XX          */ invalid(),
		/* 0xED: XX          */ invalid(),
		/* 0xEE: XOR n       */ xorR8(a, paramB()),
		/* 0xEF: RST 28      */ rst(0x28),
		/* 0xF0: LDH A, (n)  */ pipe(paramB(), val(0xFF), readByte{}, a.Write()),
		/* 0xF1: POP AF      */ pop(af),
		/* 0xF2: LD A,(C)    */ pipe(c.Read(), val(0xFF), readByte{}, a.Write()),
		/* 0xF3: DI          */ di(),
		/* 0xF4: XX          */ invalid(),
		/* 0xF5: PUSH AF     */ push(af),
		/* 0xF6: OR n        */ orR8(a, paramB()),
		/* 0xF7: RST 30      */ rst(0x30),
		/* 0xF8: LDHL SP,d   */ ldHLSPn(),
		/* 0xF9: LD SP,HL    */ pipe(hl.Read(), sp.Write(), delay{}),
		/* 0xFA: LD A,(nn)   */ pipe(paramW(), readByte{}, a.Write()),
		/* 0xFB: EI          */ ei(),
		/* 0xFC: XX          */ invalid(),
		/* 0xFD: XX          */ invalid(),
		/* 0xFE: CP n        */ cpR8(a, paramB()),
		/* 0xFF: RST 38      */ rst(0x38),
	}
}

var opCodes = createOpCodeTable()

func nextOpCode() opCode {
	return pipe(paramB(), opCodes)
}

func createExtendedOpCodeTable() opCodeTable {
	return opCodeTable{
		/* 0x00: RLC B      */ rlc(b),
		/* 0x01: RLC C      */ rlc(c),
		/* 0x02: RLC D      */ rlc(d),
		/* 0x03: RLC E      */ rlc(e),
		/* 0x04: RLC H      */ rlc(h),
		/* 0x05: RLC L      */ rlc(l),
		/* 0x06: RLC (HL)   */ rlc(hl.Deref()),
		/* 0x07: RLC A      */ rlc(a),
		/* 0x08: RRC B      */ rrc(b),
		/* 0x09: RRC C      */ rrc(c),
		/* 0x0A: RRC D      */ rrc(d),
		/* 0x0B: RRC E      */ rrc(e),
		/* 0x0C: RRC H      */ rrc(h),
		/* 0x0D: RRC L      */ rrc(l),
		/* 0x0E: RRC (HL)   */ rrc(hl.Deref()),
		/* 0x0F: RRC A      */ rrc(a),
		/* 0x10: RL B       */ rl(b),
		/* 0x11: RL C       */ rl(c),
		/* 0x12: RL D       */ rl(d),
		/* 0x13: RL E       */ rl(e),
		/* 0x14: RL H       */ rl(h),
		/* 0x15: RL L       */ rl(l),
		/* 0x16: RL (HL)    */ rl(hl.Deref()),
		/* 0x17: RL A       */ rl(a),
		/* 0x18: RR B       */ rr(b),
		/* 0x19: RR C       */ rr(c),
		/* 0x1A: RR D       */ rr(d),
		/* 0x1B: RR E       */ rr(e),
		/* 0x1C: RR H       */ rr(h),
		/* 0x1D: RR L       */ rr(l),
		/* 0x1E: RR (HL)    */ rr(hl.Deref()),
		/* 0x1F: RR A       */ rr(a),
		/* 0x20: SLA B      */ sla(b),
		/* 0x21: SLA C      */ sla(c),
		/* 0x22: SLA D      */ sla(d),
		/* 0x23: SLA E      */ sla(e),
		/* 0x24: SLA H      */ sla(h),
		/* 0x25: SLA L      */ sla(l),
		/* 0x26: SLA (HL)   */ sla(hl.Deref()),
		/* 0x27: SLA A      */ sla(a),
		/* 0x28: SRA B      */ sra(b),
		/* 0x29: SRA C      */ sra(c),
		/* 0x2A: SRA D      */ sra(d),
		/* 0x2B: SRA E      */ sra(e),
		/* 0x2C: SRA H      */ sra(h),
		/* 0x2D: SRA L      */ sra(l),
		/* 0x2E: SRA (HL)   */ sra(hl.Deref()),
		/* 0x2F: SRA A      */ sra(a),
		/* 0x30: SWAP B     */ swap(b),
		/* 0x31: SWAP C     */ swap(c),
		/* 0x32: SWAP D     */ swap(d),
		/* 0x33: SWAP E     */ swap(e),
		/* 0x34: SWAP H     */ swap(h),
		/* 0x35: SWAP L     */ swap(l),
		/* 0x36: SWAP (HL)  */ swap(hl.Deref()),
		/* 0x37: SWAP A     */ swap(a),
		/* 0x38: SRL B      */ srl(b),
		/* 0x39: SRL C      */ srl(c),
		/* 0x3A: SRL D      */ srl(d),
		/* 0x3B: SRL E      */ srl(e),
		/* 0x3C: SRL H      */ srl(h),
		/* 0x3D: SRL L      */ srl(l),
		/* 0x3E: SRL (HL)   */ srl(hl.Deref()),
		/* 0x3F: SRL A      */ srl(a),
		/* 0x40: BIT 0,B    */ bit(0, b),
		/* 0x41: BIT 0,C    */ bit(0, c),
		/* 0x42: BIT 0,D    */ bit(0, d),
		/* 0x43: BIT 0,E    */ bit(0, e),
		/* 0x44: BIT 0,H    */ bit(0, h),
		/* 0x45: BIT 0,L    */ bit(0, l),
		/* 0x46: BIT 0,(HL) */ bit(0, hl.Deref()),
		/* 0x47: BIT 0,A    */ bit(0, a),
		/* 0x48: BIT 1,B    */ bit(1, b),
		/* 0x49: BIT 1,C    */ bit(1, c),
		/* 0x4A: BIT 1,D    */ bit(1, d),
		/* 0x4B: BIT 1,E    */ bit(1, e),
		/* 0x4C: BIT 1,H    */ bit(1, h),
		/* 0x4D: BIT 1,L    */ bit(1, l),
		/* 0x4E: BIT 1,(HL) */ bit(1, hl.Deref()),
		/* 0x4F: BIT 1,A    */ bit(1, a),
		/* 0x50: BIT 2,B    */ bit(2, b),
		/* 0x51: BIT 2,C    */ bit(2, c),
		/* 0x52: BIT 2,D    */ bit(2, d),
		/* 0x53: BIT 2,E    */ bit(2, e),
		/* 0x54: BIT 2,H    */ bit(2, h),
		/* 0x55: BIT 2,L    */ bit(2, l),
		/* 0x56: BIT 2,(HL) */ bit(2, hl.Deref()),
		/* 0x57: BIT 2,A    */ bit(2, a),
		/* 0x58: BIT 3,B    */ bit(3, b),
		/* 0x59: BIT 3,C    */ bit(3, c),
		/* 0x5A: BIT 3,D    */ bit(3, d),
		/* 0x5B: BIT 3,E    */ bit(3, e),
		/* 0x5C: BIT 3,H    */ bit(3, h),
		/* 0x5D: BIT 3,L    */ bit(3, l),
		/* 0x5E: BIT 3,(HL) */ bit(3, hl.Deref()),
		/* 0x5F: BIT 3,A    */ bit(3, a),
		/* 0x60: BIT 4,B    */ bit(4, b),
		/* 0x61: BIT 4,C    */ bit(4, c),
		/* 0x62: BIT 4,D    */ bit(4, d),
		/* 0x63: BIT 4,E    */ bit(4, e),
		/* 0x64: BIT 4,H    */ bit(4, h),
		/* 0x65: BIT 4,L    */ bit(4, l),
		/* 0x66: BIT 4,(HL) */ bit(4, hl.Deref()),
		/* 0x67: BIT 4,A    */ bit(4, a),
		/* 0x68: BIT 5,B    */ bit(5, b),
		/* 0x69: BIT 5,C    */ bit(5, c),
		/* 0x6A: BIT 5,D    */ bit(5, d),
		/* 0x6B: BIT 5,E    */ bit(5, e),
		/* 0x6C: BIT 5,H    */ bit(5, h),
		/* 0x6D: BIT 5,L    */ bit(5, l),
		/* 0x6E: BIT 5,(HL) */ bit(5, hl.Deref()),
		/* 0x6F: BIT 5,A    */ bit(5, a),
		/* 0x70: BIT 6,B    */ bit(6, b),
		/* 0x71: BIT 6,C    */ bit(6, c),
		/* 0x72: BIT 6,D    */ bit(6, d),
		/* 0x73: BIT 6,E    */ bit(6, e),
		/* 0x74: BIT 6,H    */ bit(6, h),
		/* 0x75: BIT 6,L    */ bit(6, l),
		/* 0x76: BIT 6,(HL) */ bit(6, hl.Deref()),
		/* 0x77: BIT 6,A    */ bit(6, a),
		/* 0x78: BIT 7,B    */ bit(7, b),
		/* 0x79: BIT 7,C    */ bit(7, c),
		/* 0x7A: BIT 7,D    */ bit(7, d),
		/* 0x7B: BIT 7,E    */ bit(7, e),
		/* 0x7C: BIT 7,H    */ bit(7, h),
		/* 0x7D: BIT 7,L    */ bit(7, l),
		/* 0x7E: BIT 7,(HL) */ bit(7, hl.Deref()),
		/* 0x7F: BIT 7,A    */ bit(7, a),
		/* 0x80: RES 0,B    */ res(0, b),
		/* 0x81: RES 0,C    */ res(0, c),
		/* 0x82: RES 0,D    */ res(0, d),
		/* 0x83: RES 0,E    */ res(0, e),
		/* 0x84: RES 0,H    */ res(0, h),
		/* 0x85: RES 0,L    */ res(0, l),
		/* 0x86: RES 0,(HL) */ res(0, hl.Deref()),
		/* 0x87: RES 0,A    */ res(0, a),
		/* 0x88: RES 1,B    */ res(1, b),
		/* 0x89: RES 1,C    */ res(1, c),
		/* 0x8A: RES 1,D    */ res(1, d),
		/* 0x8B: RES 1,E    */ res(1, e),
		/* 0x8C: RES 1,H    */ res(1, h),
		/* 0x8D: RES 1,L    */ res(1, l),
		/* 0x8E: RES 1,(HL) */ res(1, hl.Deref()),
		/* 0x8F: RES 1,A    */ res(1, a),
		/* 0x90: RES 2,B    */ res(2, b),
		/* 0x91: RES 2,C    */ res(2, c),
		/* 0x92: RES 2,D    */ res(2, d),
		/* 0x93: RES 2,E    */ res(2, e),
		/* 0x94: RES 2,H    */ res(2, h),
		/* 0x95: RES 2,L    */ res(2, l),
		/* 0x96: RES 2,(HL) */ res(2, hl.Deref()),
		/* 0x97: RES 2,A    */ res(2, a),
		/* 0x98: RES 3,B    */ res(3, b),
		/* 0x99: RES 3,C    */ res(3, c),
		/* 0x9A: RES 3,D    */ res(3, d),
		/* 0x9B: RES 3,E    */ res(3, e),
		/* 0x9C: RES 3,H    */ res(3, h),
		/* 0x9D: RES 3,L    */ res(3, l),
		/* 0x9E: RES 3,(HL) */ res(3, hl.Deref()),
		/* 0x9F: RES 3,A    */ res(3, a),
		/* 0xA0: RES 4,B    */ res(4, b),
		/* 0xA1: RES 4,C    */ res(4, c),
		/* 0xA2: RES 4,D    */ res(4, d),
		/* 0xA3: RES 4,E    */ res(4, e),
		/* 0xA4: RES 4,H    */ res(4, h),
		/* 0xA5: RES 4,L    */ res(4, l),
		/* 0xA6: RES 4,(HL  */ res(4, hl.Deref()),
		/* 0xA7: RES 4,A    */ res(4, a),
		/* 0xA8: RES 5,B    */ res(5, b),
		/* 0xA9: RES 5,C    */ res(5, c),
		/* 0xAA: RES 5,D    */ res(5, d),
		/* 0xAB: RES 5,E    */ res(5, e),
		/* 0xAC: RES 5,H    */ res(5, h),
		/* 0xAD: RES 5,L    */ res(5, l),
		/* 0xAE: RES 5,(HL) */ res(5, hl.Deref()),
		/* 0xAF: RES 5,A    */ res(5, a),
		/* 0xB0: RES 6,B    */ res(6, b),
		/* 0xB1: RES 6,C    */ res(6, c),
		/* 0xB2: RES 6,D    */ res(6, d),
		/* 0xB3: RES 6,E    */ res(6, e),
		/* 0xB4: RES 6,H    */ res(6, h),
		/* 0xB5: RES 6,L    */ res(6, l),
		/* 0xB6: RES 6,(HL) */ res(6, hl.Deref()),
		/* 0xB7: RES 6,A    */ res(6, a),
		/* 0xB8: RES 7,B    */ res(7, b),
		/* 0xB9: RES 7,C    */ res(7, c),
		/* 0xBA: RES 7,D    */ res(7, d),
		/* 0xBB: RES 7,E    */ res(7, e),
		/* 0xBC: RES 7,H    */ res(7, h),
		/* 0xBD: RES 7,L    */ res(7, l),
		/* 0xBE: RES 7,(HL) */ res(7, hl.Deref()),
		/* 0xBF: RES 7,A    */ res(7, a),
		/* 0xC0: SET 0,B    */ set(0, b),
		/* 0xC1: SET 0,C    */ set(0, c),
		/* 0xC2: SET 0,D    */ set(0, d),
		/* 0xC3: SET 0,E    */ set(0, e),
		/* 0xC4: SET 0,H    */ set(0, h),
		/* 0xC5: SET 0,L    */ set(0, l),
		/* 0xC6: SET 0,(HL) */ set(0, hl.Deref()),
		/* 0xC7: SET 0,A    */ set(0, a),
		/* 0xC8: SET 1,B    */ set(1, b),
		/* 0xC9: SET 1,C    */ set(1, c),
		/* 0xCA: SET 1,D    */ set(1, d),
		/* 0xCB: SET 1,E    */ set(1, e),
		/* 0xCC: SET 1,H    */ set(1, h),
		/* 0xCD: SET 1,L    */ set(1, l),
		/* 0xCE: SET 1,(HL) */ set(1, hl.Deref()),
		/* 0xCF: SET 1,A    */ set(1, a),
		/* 0xD0: SET 2,B    */ set(2, b),
		/* 0xD1: SET 2,C    */ set(2, c),
		/* 0xD2: SET 2,D    */ set(2, d),
		/* 0xD3: SET 2,E    */ set(2, e),
		/* 0xD4: SET 2,H    */ set(2, h),
		/* 0xD5: SET 2,L    */ set(2, l),
		/* 0xD6: SET 2,(HL) */ set(2, hl.Deref()),
		/* 0xD7: SET 2,A    */ set(2, a),
		/* 0xD8: SET 3,B    */ set(3, b),
		/* 0xD9: SET 3,C    */ set(3, c),
		/* 0xDA: SET 3,D    */ set(3, d),
		/* 0xDB: SET 3,E    */ set(3, e),
		/* 0xDC: SET 3,H    */ set(3, h),
		/* 0xDD: SET 3,L    */ set(3, l),
		/* 0xDE: SET 3,(HL) */ set(3, hl.Deref()),
		/* 0xDF: SET 3,A    */ set(3, a),
		/* 0xE0: SET 4,B    */ set(4, b),
		/* 0xE1: SET 4,C    */ set(4, c),
		/* 0xE2: SET 4,D    */ set(4, d),
		/* 0xE3: SET 4,E    */ set(4, e),
		/* 0xE4: SET 4,H    */ set(4, h),
		/* 0xE5: SET 4,L    */ set(4, l),
		/* 0xE6: SET 4,(HL) */ set(4, hl.Deref()),
		/* 0xE7: SET 4,A    */ set(4, a),
		/* 0xE8: SET 5,B    */ set(5, b),
		/* 0xE9: SET 5,C    */ set(5, c),
		/* 0xEA: SET 5,D    */ set(5, d),
		/* 0xEB: SET 5,E    */ set(5, e),
		/* 0xEC: SET 5,H    */ set(5, h),
		/* 0xED: SET 5,L    */ set(5, l),
		/* 0xEE: SET 5,(HL) */ set(5, hl.Deref()),
		/* 0xEF: SET 5,A    */ set(5, a),
		/* 0xF0: SET 6,B    */ set(6, b),
		/* 0xF1: SET 6,C    */ set(6, c),
		/* 0xF2: SET 6,D    */ set(6, d),
		/* 0xF3: SET 6,E    */ set(6, e),
		/* 0xF4: SET 6,H    */ set(6, h),
		/* 0xF5: SET 6,L    */ set(6, l),
		/* 0xF6: SET 6,(HL) */ set(6, hl.Deref()),
		/* 0xF7: SET 6,A    */ set(6, a),
		/* 0xF8: SET 7,B    */ set(7, b),
		/* 0xF9: SET 7,C    */ set(7, c),
		/* 0xFA: SET 7,D    */ set(7, d),
		/* 0xFB: SET 7,E    */ set(7, e),
		/* 0xFC: SET 7,H    */ set(7, h),
		/* 0xFD: SET 7,L    */ set(7, l),
		/* 0xFE: SET 7,(HL) */ set(7, hl.Deref()),
		/* 0xFF: SET 7,A    */ set(7, a),
	}
}

var irqHandlerOpCode = pipe(
	delay{},
	delay{},
	delay{},
	opCodeFn(func(c *CPU, state *ocState) {
		c.sp -= 2
		addr := c.sp
		val := c.pc

		state.pushB(byte(val))
		state.pushW(addr)

		state.pushB(byte(val >> 8))
		state.pushW(addr + 1)
	}),
	writeByte{ /*hi*/ },
	opCodeFn(func(c *CPU, state *ocState) {
		irq := c.mmu.GetCurrentIterrupt()
		c.pc = irq.Address()
		c.ime = false
	}),
	writeByte{ /*lo*/ },
)
